{"version":3,"file":"zoom.service.js","sourceRoot":"","sources":["../../../src/lib/zoom.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { EnrollCallbackResponse, AuthCallbackResponse, ZoomVerifyResponse } from './interfaces';\r\nimport { Responses } from './responses';\r\n\r\n@Injectable()\r\n\r\nexport class ZoomService {\r\n    constructor() {}\r\n\r\n    /**\r\n     * Check whether the global variable ZoomAuthentication is available or not\r\n     */\r\n    protected isZoomUsable(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            document.addEventListener('deviceready', () => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                (zoom !== undefined && zoom !== null) ? resolve(Responses.available) : reject(Responses.notAvailable);\r\n            }, false);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise that checks the installation and initialization status of the zoom plugin\r\n     * @param promise is an initiated promise that calls the native zoOm functions\r\n     */\r\n    protected PromiseExtended(): Promise<any> {\r\n        return new Promise((resolve, reject) => {\r\n            this.isZoomInitialized().then(initalized => {\r\n                if(initalized) {\r\n                    resolve();\r\n                } else {\r\n                    reject(Responses.notInitialized);\r\n                }\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise that resolves zoOm initialize status\r\n     */\r\n    isZoomInitialized(): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            this.isZoomUsable().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.getSdkStatus((res: any) => {\r\n                    resolve(res === 'Initialized');\r\n                }, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise the resolves the current zoOm SDK status\r\n     */\r\n    getSdkStatus(): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.getSdkStatus(resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * Initialize the zoOm enrollment and enrolls the new zoOm user \r\n     * @param userId user id of the new user\r\n     * @param encryptionSecret secret passphrase of the new user\r\n     *\r\n     */\r\n    enroll(userId: string, encryptionSecret: string): Promise<EnrollCallbackResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.enroll(userId, encryptionSecret, resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize the zoOm authentication and authenticate the enrolled used with given enrolled credentials\r\n     * @param userId user id of enrolled user to authenitcate\r\n     * @param encryptionSecret secret passphrase of the enrolled user at the time of enroll\r\n     */\r\n\r\n    authenticate(userId: string, encryptionSecret: string): Promise<AuthCallbackResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.authenticate(userId, encryptionSecret, resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise that resolves enrollment status of the given uer\r\n     * @param userId user id used for enrollment\r\n     */\r\n\r\n    getUserEnrollmentStatus(userId: string): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.getUserEnrollmentStatus(userId, resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise that resolves the current version of zoom in use\r\n     */\r\n    getVersion(): Promise<string> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.getVersion(resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Return a promise that resolves the enrollment status of given user\r\n     * @param userId user id used for enrollment\r\n     */\r\n    isUserEnrolled(userId: string): Promise<boolean> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any> window).ZoomAuthentication;\r\n                zoom.isUserEnrolled(userId, resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Initialize the zoom verification and resolve the zoom working status\r\n     */\r\n    verify(): Promise<ZoomVerifyResponse> {\r\n        return new Promise((resolve, reject) => {\r\n            this.PromiseExtended().then(() => {\r\n                let zoom = <any> (<any>window).ZoomAuthentication;\r\n                zoom.verify(resolve, reject);\r\n            }).catch(reject);\r\n        });\r\n    }\r\n}"]}